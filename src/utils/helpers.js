const axios = require('axios');

const HttpError = require('../models/http-error');
const { uploadImageToCloudinary } = require('../lib/cloudinary');

/**
 * Transform array of objects to a smaller array of objects with required fields.
 * @param {Array} errors - array of error objects generated by validationResult fn.
 * @returns {Array} updated array of errors with necessary fields.
 */
const collectInputErrors = (errors) => {
  return errors.map((error) => {
    return { message: error.msg, field: error.path };
  });
};

/**
 * Convert hours to milliseconds
 * @param {String} hours - string as a number of  hours
 * @returns {Number} milliseconds
 */
const convertHoursToMilliseconds = (hours) => {
  return parseInt(hours) * 60 * 60 * 1000;
};

/**
 * Check image file in request
 * @param {File} file - image as a file
 * @param {Function} next - default next route fn
 * @returns {Error} return error if not file found
 */
const saveImage = async (file, folder, next) => {
  if (!file) {
    const error = new HttpError('Provided file is incorrect or missing', 422, {
      field: 'image',
      message: 'Please check the selected file (.jpg, .png, .jpeg)',
    });

    return next(error);
  }

  try {
    file.path = await uploadImageToCloudinary(file, folder);
  } catch (e) {
    return next(new HttpError('Failed to save image. Please try again later'));
  }
};

/**
 * Check inputs fields in request
 * @param {Object} errors - result from validationResult function
 * @param {Function} next - default next route fn
 * @returns {Error} return error if errors not empty
 */
const validateInputs = (errors, next) => {
  if (!errors.isEmpty()) {
    const error = new HttpError(
      'Invalid inputs! Please check your data and try again',
      422,
      collectInputErrors(errors.array())
    );

    return next(error);
  }
};

/**
 * Get google map coordinates
 * @param {String} address - place address
 * @returns {Object} return object with lat and lng fields
 */
const getMapCoordinates = async (address) => {
  const response = await axios.get(
    `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${
      process.env.GOOGLE_MAP_API_KEY
    }`
  );

  if (!response.data || response.data.status === 'ZERO_RESULTS') {
    throw new HttpError('Could not find location for the specified address', 422, {
      address: 'Please, enter the correct address',
    });
  }

  const coordinates = response.data.results[0].geometry.location;

  return coordinates;
};

module.exports.collectInputErrors = collectInputErrors;
module.exports.convertHoursToMilliseconds = convertHoursToMilliseconds;
module.exports.saveImage = saveImage;
module.exports.validateInputs = validateInputs;
module.exports.getMapCoordinates = getMapCoordinates;
